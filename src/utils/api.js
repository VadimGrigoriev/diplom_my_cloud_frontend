import axios from "axios";
import store from "../store"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º store Redux
import { refreshAccessToken } from "../features/authSlice";
import logger from "./logger";

const api = axios.create({
  baseURL: "http://127.0.0.1:8000/api/", // –ë–∞–∑–æ–≤—ã–π URL backend API
  headers: {
    "Content-Type": "application/json",
  },
});

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–∞
api.interceptors.request.use(
  (config) => {
    const accessToken = localStorage.getItem("accessToken");
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }

    logger.info(`üì° API Request: ${config.method.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    logger.error(`üö® API Request Error: ${error.message}`);
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 401 Unauthorized
api.interceptors.response.use(
  (response) => {
    logger.info(`‚úÖ API Response: ${response.status} ${response.config.url}`);
    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // üî¥ –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É API-–∑–∞–ø—Ä–æ—Å–∞
    if (error.response) {
      logger.error(`‚ùå API Response Error: ${error.response.status} ${originalRequest.url} - ${error.message}`);
    } else {
      logger.error(`‚ùå API Network Error: ${error.message}`);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É 401 –∏ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        logger.warn("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...");

        // –î–∏—Å–ø–µ—Ç—á –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Redux
        const result = await store.dispatch(refreshAccessToken());
        const newAccessToken = result.payload?.accessToken;

        if (newAccessToken) {
          logger.info("üîë –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
          return api(originalRequest); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        }
      } catch (refreshError) {
        logger.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: " + refreshError.message);
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        window.location.href = "/login";
      }
    }

    return Promise.reject(error);
  }
);

export default api;
