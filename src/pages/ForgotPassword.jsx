import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import SuccessMessage from "../components/ForgotPassword/SuccessMessage";
import ErrorMessage from "../components/ForgotPassword/ErrorMessage";
import VerificationForm from "../components/ForgotPassword/VerificationForm";
import ResetPasswordForm from "../components/ForgotPassword/ResetPasswordForm";
import validatePassword from "../utils/validatePassword";
import api from "../utils/api";
import logger from "../utils/logger";

const ForgotPasswordPage = () => {
  const [username, setUsername] = useState("");
  const [fullName, setFullName] = useState("");
  const [step, setStep] = useState(1);
  const [error, setError] = useState(null);
  const [validationError, setValidationError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    if (localStorage.getItem("passwordResetSuccess") === "true") {
      logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.");
      localStorage.removeItem("passwordResetSuccess");
      navigate("/login");
    }
  }, [navigate]);
  
  useEffect(() => {
    if (success) {
      logger.info("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...");
      localStorage.setItem("passwordResetSuccess", "true");
      const timer = setTimeout(() => {
        localStorage.removeItem("passwordResetSuccess");
        navigate("/login");
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [success, navigate]);

  // –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
  useEffect(() => {
    setValidationError(null);
  }, [newPassword]);

  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "My Cloud"
  const handleClick = () => {
    navigate("/");
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleVerification = async (e) => {
    e.preventDefault();
    setError(null);
    logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

    try {
      const response = await api.post("/auth/verify-user/", {
        username,
        full_name: fullName,
      });

      if (response.data.success) {
        logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.`);
        setStep(2);
      } else {
        logger.warn(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.`);
        setError("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
      }
    } catch (err) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}: ${err.message}`);
      setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  };

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  const handlePasswordReset = async (e) => {
    e.preventDefault();
    setError(null);
    setValidationError(null);

    logger.info(`üîë –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    const passwordError = validatePassword(newPassword);
    if (passwordError) {
      logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è: ${passwordError}`);
      setValidationError(passwordError);
      return;
    }

    if (newPassword !== confirmPassword) {
      logger.warn("‚ö†Ô∏è –í–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
      return;
    }

    try {
      await api.post("/auth/reset-password/", {
        username,
        new_password: newPassword,
      });
      logger.info(`‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
      setSuccess(true);
    } catch (err) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}: ${err.message}`);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  };

  return (
    <div className="min-h-screen bg-blue-50 flex items-center justify-center px-4 py-12">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <h2 
            className="text-4xl font-bold text-blue-600 mb-4 cursor-pointer hover:text-blue-700"
            onClick={handleClick}
          >
            My Cloud
          </h2>
          <p className="mt-2 text-gray-600">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É</p>
        </div>

        {success ? (
          <SuccessMessage />
        ) : (
          <form
            onSubmit={step === 1 ? handleVerification : handlePasswordReset}
            className="bg-white shadow-xl rounded-2xl px-10 pt-8 pb-10 space-y-6"
          >
            <ErrorMessage error={error} />

            {step === 1 ? (
              <VerificationForm
                username={username}
                setUsername={setUsername}
                fullName={fullName}
                setFullName={setFullName}
                onSubmit={handleVerification}
                error={error}
              />
            ) : (
              <ResetPasswordForm
                newPassword={newPassword}
                setNewPassword={setNewPassword}
                confirmPassword={confirmPassword}
                setConfirmPassword={setConfirmPassword}
                onSubmit={handlePasswordReset}
                error={error}
                validationError={validationError}
              />
            )}

            <div className="text-center">
              <a href="/login" className="text-blue-600 hover:underline text-sm">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
              </a>
            </div>
          </form>
        )}
      </div>
    </div>
  );
};

export default ForgotPasswordPage;
