/* eslint-disable react/prop-types */
import { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { fetchUsers } from "../features/userSlice";
import { useNavigate } from "react-router-dom";
import api from "../utils/api";
import logger from "../utils/logger";

import Header from "../components/Admin/Header";
import UserTable from "../components/Admin/UserTable";
import DeleteConfirmation from "../components/Admin/DeleteConfirmation";
import LoadingSpinner from "../components/Admin/LoadingSpinner";
import ErrorMessage from "../components/Admin/ErrorMessage";

const AdminDashboard = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { userList, isLoading, error } = useSelector((state) => state.user);
  const authUser = useSelector((state) => state.auth.user);
  const [confirmDelete, setConfirmDelete] = useState(null);
  const [searchFilter, setSearchFilter] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: 'id', direction: 'asc' });

  useEffect(() => {
    if (authUser === null) {
      logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
      return; // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (!authUser?.is_admin) {
      logger.warn(`üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${authUser.username} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω.`);
      navigate("/dashboard");
    } else {
      logger.info("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
      dispatch(fetchUsers());
    }
  }, [dispatch, authUser, navigate]);

  const toggleAdmin = async (id, isAdmin) => {
    if (id === authUser.id) {
      logger.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.");
      return;
    }

    try {
      await api.patch(`/admin/users/${id}/`, { is_admin: !isAdmin });
      logger.info(
        `üîÑ –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω—ë–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${id} —Ç–µ–ø–µ—Ä—å ${!isAdmin ? "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" : "–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}.`
      );
      dispatch(fetchUsers()); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${id}: ${error.message}`);
    }
  };

  const deleteUser = async (id) => {
    if (id === authUser.id) {
      logger.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞.");
      return;
    }

    try {
      await api.delete(`/admin/users/${id}/delete/`);
      logger.warn(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${id} —É–¥–∞–ª—ë–Ω.`);
      dispatch(fetchUsers()); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      setConfirmDelete(null);
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${id}: ${error.message}`);
    }
  };

  if (authUser === null) return <LoadingSpinner />;
  if (isLoading) return <LoadingSpinner />;
  if (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error}`);
    return <ErrorMessage message={error} />;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header navigate={navigate} />
      <main className="container mx-auto px-6 py-8">
        <UserTable
          userList={userList}
          searchFilter={searchFilter}
          setSearchFilter={setSearchFilter}
          sortConfig={sortConfig}
          setSortConfig={setSortConfig}
          authUser={authUser}
          toggleAdmin={toggleAdmin}
          setConfirmDelete={setConfirmDelete}
        />
      </main>
      {confirmDelete && (
        <DeleteConfirmation
          confirmDelete={confirmDelete}
          setConfirmDelete={setConfirmDelete}
          deleteUser={deleteUser}
        />
      )}
    </div>
  );
};

export default AdminDashboard;
