import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { showNotification } from "../components/ToastProvider/ToastProvider";
import api from "../utils/api";
import logger from "../utils/logger";

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
export const fetchUserFiles = createAsyncThunk(
  "files/fetchUserFiles",
  async (userId, { rejectWithValue }) => {
    try {
      logger.info(`üìÇ –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);
      const response = await api.get(`/admin/users/${userId}/files/`);
      logger.info(`‚úÖ –§–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
      return response.data;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error.message}`);
      return rejectWithValue("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã.");
    }
  }
);

// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
export const deleteFile = createAsyncThunk(
  "files/deleteFile",
  async ({ fileId, userId }, { rejectWithValue, dispatch }) => {
    try {
      logger.warn(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ID: ${fileId} (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId})`);
      await api.delete(`/admin/files/${fileId}/`);
      dispatch(fetchUserFiles(userId)); // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      logger.info(`‚úÖ –§–∞–π–ª ${fileId} —É–¥–∞–ª–µ–Ω`);
      return fileId;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${fileId}: ${error.message}`);
      return rejectWithValue("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª.");
    }
  }
);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
export const fetchFiles = createAsyncThunk(
  "files/fetchFiles",
  async (_, { rejectWithValue }) => {
    try {
      logger.info("üìÇ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...");
      const response = await api.get("/files/");
      logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.length} —Ñ–∞–π–ª–æ–≤`);
      return response.data.sort((a, b) => new Date(b.uploaded_at) - new Date(a.uploaded_at)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ${error.message}`);
      showNotification.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
      return rejectWithValue("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã.");
    }
  }
);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
export const updateComment = createAsyncThunk(
  "files/updateComment",
  async ({ fileId, comment }, { rejectWithValue }) => {
    try {
      logger.info(`üí¨ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ñ–∞–π–ª—É ID: ${fileId}`);
      const response = await api.patch(`/files/${fileId}/`, { comment });
      logger.info(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: "${comment}"`);
      return { fileId, comment: response.data.comment }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Ñ–∞–π–ª–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${error.message}`);
      return rejectWithValue("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.");
    }
  }
);

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
export const renameFile = createAsyncThunk(
  "files/renameFile",
  async ({ fileId, newName }, { rejectWithValue }) => {
    try {
      logger.info(`‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ID: ${fileId} ‚Üí "${newName}"`);
      const response = await api.patch(`/files/${fileId}/rename/`, { original_name: newName });
      logger.info(`‚úÖ –§–∞–π–ª ${fileId} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ "${response.data.original_name}"`);
      return { fileId, originalName: response.data.original_name }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${fileId}: ${error.message}`);
      return rejectWithValue("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª.");
    }
  }
);

const fileSlice = createSlice({
  name: "files",
  initialState: {
    fileList: [],
    isLoading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchFiles.pending, (state) => {
        state.isLoading = true;
        state.error = null;
        logger.info("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...");
      })
      .addCase(fetchFiles.fulfilled, (state, action) => {
        state.isLoading = false;
        state.fileList = action.payload;
        logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${action.payload.length} —Ñ–∞–π–ª–æ–≤`);
      })
      .addCase(fetchFiles.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ${state.error}`);
      })
      .addCase(fetchUserFiles.pending, (state) => {
        state.isLoading = true;
        state.error = null;
        logger.info("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      })
      .addCase(fetchUserFiles.fulfilled, (state, action) => {
        state.isLoading = false;
        state.fileList = action.payload;
        logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${action.payload.length} —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
      })
      .addCase(fetchUserFiles.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${state.error}`);
      })
      .addCase(deleteFile.fulfilled, (state, action) => {
        state.fileList = state.fileList.filter((file) => file.id !== action.payload);
        logger.info(`üóëÔ∏è –§–∞–π–ª ID: ${action.payload} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞`);
      })
      .addCase(updateComment.fulfilled, (state, action) => {
        const { fileId, comment } = action.payload;
        const file = state.fileList.find((f) => f.id === fileId);
        if (file) {
          file.comment = comment;
          logger.info(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Redux –¥–ª—è —Ñ–∞–π–ª–∞ ID: ${fileId}`);
        }
      })
      .addCase(renameFile.fulfilled, (state, action) => {
        const { fileId, originalName } = action.payload;
        const file = state.fileList.find((f) => f.id === fileId);
        if (file) {
          file.original_name = originalName;
          logger.info(`‚úèÔ∏è –§–∞–π–ª ID: ${fileId} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ "${originalName}"`);
        }
      });
  }
});

export default fileSlice.reducer;
