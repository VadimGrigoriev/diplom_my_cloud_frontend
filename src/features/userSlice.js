import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import api from "../utils/api";
import logger from "../utils/logger";

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const fetchUsers = createAsyncThunk(
  "users/fetchUsers",
  async (_, { rejectWithValue }) => {
    try {
      logger.info("üìÇ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
      const response = await api.get("/admin/users/");
      logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${response.data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      return response.data;
    } catch (error) {
      logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
      return rejectWithValue("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
    }
  }
);

const userSlice = createSlice({
  name: 'user',
  initialState: {
    userList: [],
    isLoading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsers.pending, (state) => {
        state.isLoading = true;
        state.error = null;
        logger.info("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.isLoading = false;
        state.userList = action.payload;
        logger.info(`‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω: ${action.payload.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.payload;
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${state.error}`);
      });
  }
});

export default userSlice.reducer;
